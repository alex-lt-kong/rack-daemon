#!/usr/bin/python3
# -*- coding: utf-8 -*-

from flask import Flask, redirect, render_template, Response, request, session

import argparse
import datetime as dt
import json
import hashlib
import logging
import os
import pymysql
import requests
import RPi.GPIO as GPIO
import signal
import smtplib
import sys
import threading
import time
import waitress

app = Flask(__name__)
app.secret_key = b'97byf834@#@6t654e353}{[]798u9&^*^&'
app.config.update(
    SESSION_COOKIE_SECURE=True,
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SAMESITE='Lax',
)


INVALID_VALUE = -65536

# 28.0301a279faf2 is the shorter one in the rack
# 28-030997792b61 is the shortest one in the rack
# 28-01144ebe52aa and 28-01144ef1faaa are the 2-meter long ones
sensors = ['/sys/bus/w1/devices/28-0301a279faf2/',
           '/sys/bus/w1/devices/28-030997792b61/',
           '/sys/bus/w1/devices/28-01144ebe52aa/',
           '/sys/bus/w1/devices/28-01144ef1faaa/']
stop_signal = False
locations = ['rack-front', 'rack-back', 'rack-ambient1', 'rack-ambient2']
log_path = '/root/bin/fans-controller/static/temperature.log'
users_path = '/root/bin/fans-controller/users.json'
fans_mode_path = '/root/bin/fans-controller/fans.mode'
fans_mode_changed = True
fans_load_tuned = None
temperatures = [None, None, None, None]


@app.route('/logout/')
def logout():

    session.pop('username', None)
    return redirect(f'../')


@app.before_request
def make_session_permanent():
    session.permanent = True
    app.permanent_session_lifetime = dt.timedelta(days=90)


@app.route('/login/', methods=['GET', 'POST'])
def login():

    if 'username' in session:
        return redirect(f'../')

    if request.method == 'POST':

        username = request.form['username']
        password = request.form['password'].encode('utf-8')

        try:
            with open(users_path, 'r') as json_file:
                json_str = json_file.read()
                json_data = json.loads(json_str)
        except Exception as e:
            return render_template(
                    'login.html',
                    message=f'<span style="color:red">Error: {e}</span>')

        if username not in json_data['users']:
            return render_template(
                    'login.html',
                    message=(f'<span style="color:red">'
                             'Error: {username} does not exist</span>'))
        if (hashlib.sha256(password).hexdigest()
                != json_data['users'][username]):
            return render_template(
                    'login.html',
                    message=('<span style="color:red">'
                             'Error: Password incorrect</span>'))

        session['username'] = request.form['username']
        return redirect(f'../')

    return render_template('login.html', message='')


@app.route('/control/', methods=['POST'])
def control():

    if 'username' in session:
        pass
    else:
        return Response('Not logged in', 500)

    if request.method != "POST":
        return Response('fans_mode not specified', 500)

    fans_mode = request.form.get("fans_mode", None)

    try:
        fans_mode = int(fans_mode)
        if fans_mode > 100:
            fans_mode = 100
        if fans_mode < 0:
            fans_mode = -1
    except Exception as e:
        return Response(f'invalid fans_mode [{fans_mode}], {e}', 500)

    fm = {'fans_mode': fans_mode}
    try:
        with open(fans_mode_path, 'w+') as json_file:
            json.dump(fm, json_file)
            global fans_mode_changed
            fans_mode_changed = True
            logging.info(f'fans_mode changed to {fans_mode}')
    except Exception as e:
        logging.error(f'Failed to save new fans_mode: {e}')
        return Response(f'Failed to save new fans_mode: {e}', 400)

    return Response(f'Success: fans_mode changed to {fans_mode}.', 200)


@app.route('/', methods=['GET', 'POST'])
def index():

    if 'username' in session:
        username = session['username']
    else:
        return redirect('./login/')

    try:
        json_file = open(fans_mode_path)
        json_str = json_file.read()
        json_data = json.loads(json_str)
        fans_mode = int(json_data['fans_mode'])
    except Exception as e:
        fans_mode = None
        return Response(f'Unable to read from json file: {e}', 400)
        logging.error(e)

    return render_template('index.html',
                           username=username,
                           fans_mode=fans_mode,
                           fans_load_tuned=fans_load_tuned,
                           temperatures=[int(x) for x in temperatures])
                           # int() allows temperatures to fit small screens


def fans_controller_loop():

    global fans_mode_changed
    global stop_signal

    sample_interval = 300
    loop_unit_delay = 1
    sample_count = 0
    gpio_pin = 23
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(gpio_pin, GPIO.OUT)

    pwm = GPIO.PWM(gpio_pin, 50)  # Frequency is 50Hz
    pwm.start(0)

    while stop_signal is False:

        time.sleep(loop_unit_delay)
        sample_count += 1
        if (loop_unit_delay * sample_count < sample_interval and
                fans_mode_changed is False):
            continue

        sample_count = 0
        fans_mode_changed = False

        for i in range(0, len(sensors)):
            if stop_signal is True:
                break
            try:
                with open(os.path.join(sensors[i], 'w1_slave'), 'r') as f:
                    data = f.read()

                    if "YES" in data:
                        (discard, sep, reading) = data.partition(' t=')
                        temperatures[i] = round(float(reading) / 1000.0, 1)
                    else:
                        temperatures[i] = INVALID_VALUE
                        logging.error('Failed to read temperature from '
                                      f'sensor_{i}')
                    logging.debug(f'temperature from sensor{i}: '
                                  f'{temperatures[i]}')
            except Exception as e:
                # in case temperature sensors are disconnected
                temperatures[i] = INVALID_VALUE

        high_temperature = abs(temperatures[1] - temperatures[0]) * 0.25 + (temperatures[1] + temperatures[0]) / 2
        low_temperature = (temperatures[2] + temperatures[3]) / 2
        delta = round(high_temperature - low_temperature, 1)
        load_raw = int(delta * 100 / 10)
        load_tuned = load_raw

        if load_tuned > 100:
            load_tuned = 100
        if load_tuned < 25 and load_tuned >= 12.5:
            load_tuned = 25
        if load_tuned < 12.5:
            load_tuned = 0

        try:
            json_file = open(fans_mode_path)
            json_str = json_file.read()
            json_data = json.loads(json_str)
            fans_mode = int(json_data['fans_mode'])
        except Exception as e:
            logging.error(f'Failed to load new fans_mode: {e}')
            fans_mode = -1
        if fans_mode != -1:
            load_tuned = fans_mode
        logging.debug(f'delta: {delta}, load_raw: {load_raw}, '
                      f'fans_mode: {fans_mode}, load_tuned: {load_tuned}')

        for i in range(len(temperatures)):
            try:
                url = ('https://monitor.sz.lan/telemetry/sensor/?'
                       'device_name=rpi-rack&'
                       'device_token=UQ9mK6T4wDZXhGxPbSgqx3Cc53AB8G&'
                       'data_type=temperature&reading={:1f}&sampling_point={}'
                       .format(temperatures[i], locations[i]))
                start = dt.datetime.now()
                r = requests.get(url=url)
                response_timestamp = dt.datetime.now()
                response_time = int((response_timestamp - start).
                                    total_seconds() * 1000)

                logging.info(f'response_text: {r.text}, '
                             f'status_code: {r.status_code}, '
                             f'response_time: {response_time}ms')

            except Exception as e:
                logging.error(f'{e}')
        try:
            url = ('https://monitor.sz.lan/telemetry/sensor/?'
                   'device_name=rpi-rack&'
                   'device_token=UQ9mK6T4wDZXhGxPbSgqx3Cc53AB8G&'
                   'data_type=fan_load&reading={:1f}&'
                   'sampling_point=1103-rack-fans'.format(load_tuned))
            start = dt.datetime.now()
            r = requests.get(url=url)
            response_timestamp = dt.datetime.now()
            response_time = int((response_timestamp - start).
                                total_seconds() * 1000)
            logging.info(f'response_text: {r.text}, '
                         f'status_code: {r.status_code}, '
                         f'response_time: {response_time}ms')
        except Exception as e:
                logging.error(f'{e}')

        pwm.ChangeDutyCycle(load_tuned)
        global fans_load_tuned
        fans_load_tuned = load_tuned
    pwm.ChangeDutyCycle(0)
    GPIO.cleanup()


def cleanup(*args):

    global stop_signal
    stop_signal = True
    # GPIO.cleanup()
    # This line is believed to be unnecessary since it has executed
    # dome in the loop thread
    logging.info('Stop signal received, exiting')
    sys.exit(0)


def send_notification_email(subject: str, mainbody: str, delay: int):

    global stop_signal

    for i in range(0, delay):
        time.sleep(1)
        if stop_signal == True:
            return

    sender = ''
    password = ''
    receivers = ['']

    message = ('From: Fans Controller from Rpi-Rack <>\n'
                'To: Admin Account <>\n'
                'Content-Type: text/html; charset="UTF-8"\n'
                'Subject: {}\n'
                '<meta http-equiv="Content-Type"  content="text/html charset=UTF-8" /><html>{}</html>'.format(subject, mainbody.replace('\n', '<br>')))

    try:
        smtpObj = smtplib.SMTP(host='server172.web-hosting.com', port=587)
        smtpObj.starttls()
        smtpObj.login(sender, password)
        smtpObj.sendmail(sender, receivers, message.encode('utf-8'))
        smtpObj.quit()
        logging.info("Email [{}] sent successfully".format(subject))
    except Exception as e:
        logging.error(f'Error sending email: {e}')


def main():

    ap = argparse.ArgumentParser()
    ap.add_argument('--debug', dest='debug', action='store_true')
    args = vars(ap.parse_args())
    debug_mode = args['debug']

    logging.basicConfig(
        filename='/var/log/mamsds/fans-controller.log',
        level=logging.DEBUG if debug_mode else logging.INFO,
        format='%(asctime)s.%(msecs)03d %(levelname)s %(module)s - %(funcName)s: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
    )
    logging.info('fans-controller started')

    signal.signal(signal.SIGINT, cleanup)
    signal.signal(signal.SIGTERM, cleanup)

    start_time = dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    email_sender = threading.Thread(target=send_notification_email,
                                    args=('fans-controller started',
                                          f'The fans-controller has been started at {start_time}',
                                          300))
    email_sender.start()
    fans_controller = threading.Thread(target=fans_controller_loop, args=())
    fans_controller.start()

    waitress.serve(app, host="127.0.0.1", port=88)
    logging.info('fans-controller finished')


if __name__ == '__main__':

    main()
